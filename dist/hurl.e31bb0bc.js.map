{"version":3,"sources":["node_modules/path-to-regexp/index.js","src/matchPath.js","src/matchRoute.js","src/resolveRoute.js","src/isChildRoute.js","src/UniversalRouter.js","index.js"],"names":["hasOwnProperty","Object","prototype","cache","Map","decodeParam","val","decodeURIComponent","err","matchPath","route","pathname","parentKeys","parentParams","end","children","cacheKey","path","regexp","get","keys","pattern","pathToRegexp","set","m","exec","params","i","length","key","prop","name","value","undefined","call","repeat","split","delimiter","map","charAt","substr","concat","matchRoute","baseUrl","match","childMatches","childIndex","next","routeToSkip","done","childRoute","parent","childMatch","resolveRoute","context","action","isChildRoute","parentRoute","UniversalRouter","routes","options","TypeError","errorHandler","router","root","Array","isArray","resolve","pathnameOrContext","matches","nextMatches","currentContext","resume","prevResult","Promise","error","Error","status","reject","then","result","link1","assign","document","createElement","href","innerText","link2","link3","body","appendChild","UR","console","log"],"mappings":"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":"hurl.e31bb0bc.js","sourceRoot":"..","sourcesContent":["/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.match = match\nmodule.exports.regexpToFunction = regexpToFunction\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n  // \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var whitelist = (options && options.whitelist) || undefined\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n      var c = path[k]\n      var matches = whitelist ? whitelist.indexOf(c) > -1 : true\n\n      if (matches) {\n        prev = c\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var pattern = capture || group\n    var delimiter = prev || defaultDelimiter\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      pattern: pattern\n        ? escapeGroup(pattern)\n        : '[^' + escapeString(delimiter === defaultDelimiter ? delimiter : (delimiter + defaultDelimiter)) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nfunction match (str, options) {\n  var keys = []\n  var re = pathToRegexp(str, keys, options)\n  return regexpToFunction(re, keys)\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nfunction regexpToFunction (re, keys) {\n  return function (pathname, options) {\n    var m = re.exec(pathname)\n    if (!m) return false\n\n    var path = m[0]\n    var index = m.index\n    var params = {}\n    var decode = (options && options.decode) || decodeURIComponent\n\n    for (var i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue\n\n      var key = keys[i - 1]\n\n      if (key.repeat) {\n        params[key.name] = m[i].split(key.delimiter).map(function (value) {\n          return decode(value, key)\n        })\n      } else {\n        params[key.name] = decode(m[i], key)\n      }\n    }\n\n    return { path: path, index: index, params: params }\n  }\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n    var validate = options ? options.validate !== false : true\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token)\n\n          if (validate && !matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token)\n\n        if (validate && !matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) continue\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var start = options.start !== false\n  var end = options.end !== false\n  var delimiter = options.delimiter || DEFAULT_DELIMITER\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = start ? '^' : ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (!token.prefix) {\n          route += '(' + capture + ')?'\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?'\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + escapeString(delimiter) + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    var endToken = tokens[tokens.length - 1]\n    var isEndDelimited = typeof endToken === 'string'\n      ? endToken[endToken.length - 1] === delimiter\n      : endToken === undefined\n\n    if (!strict) route += '(?:' + escapeString(delimiter) + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + escapeString(delimiter) + '|' + endsWith + ')'\n  }\n\n  return new RegExp(route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp'\n\nconst { hasOwnProperty } = Object.prototype\nconst cache = new Map()\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val)\n  } catch (err) {\n    return val\n  }\n}\n\nfunction matchPath(route, pathname, parentKeys, parentParams) {\n  const end = !route.children\n  const cacheKey = `${route.path || ''}|${end}`\n  let regexp = cache.get(cacheKey)\n\n  if (!regexp) {\n    const keys = []\n    regexp = {\n      keys,\n      pattern: pathToRegexp(route.path || '', keys, { end }),\n    }\n    cache.set(cacheKey, regexp)\n  }\n\n  const m = regexp.pattern.exec(pathname)\n  if (!m) {\n    return null\n  }\n\n  const path = m[0]\n  const params = { ...parentParams }\n\n  for (let i = 1; i < m.length; i++) {\n    const key = regexp.keys[i - 1]\n    const prop = key.name\n    const value = m[i]\n    if (value !== undefined || !hasOwnProperty.call(params, prop)) {\n      if (key.repeat) {\n        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : []\n      } else {\n        params[prop] = value ? decodeParam(value) : value\n      }\n    }\n  }\n\n  return {\n    path: !end && path.charAt(path.length - 1) === '/' ? path.substr(1) : path,\n    keys: parentKeys.concat(regexp.keys),\n    params,\n  }\n}\n\nexport default matchPath\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport matchPath from './matchPath'\n\nfunction matchRoute(route, baseUrl, pathname, parentKeys, parentParams) {\n  let match\n  let childMatches\n  let childIndex = 0\n\n  return {\n    next(routeToSkip) {\n      if (route === routeToSkip) {\n        return { done: true }\n      }\n\n      if (!match) {\n        match = matchPath(route, pathname, parentKeys, parentParams)\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              baseUrl,\n              path: match.path,\n              keys: match.keys,\n              params: match.params,\n            },\n          }\n        }\n      }\n\n      if (match && route.children) {\n        while (childIndex < route.children.length) {\n          if (!childMatches) {\n            const childRoute = route.children[childIndex]\n            childRoute.parent = route\n\n            childMatches = matchRoute(\n              childRoute,\n              baseUrl + match.path,\n              pathname.substr(match.path.length),\n              match.keys,\n              match.params,\n            )\n          }\n\n          const childMatch = childMatches.next(routeToSkip)\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            }\n          }\n\n          childMatches = null\n          childIndex++\n        }\n      }\n\n      return { done: true }\n    },\n  }\n}\n\nexport default matchRoute\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction resolveRoute(context, params) {\n  if (typeof context.route.action === 'function') {\n    return context.route.action(context, params)\n  }\n  return undefined\n}\n\nexport default resolveRoute\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute\n  while (route) {\n    route = route.parent\n    if (route === parentRoute) {\n      return true\n    }\n  }\n  return false\n}\n\nexport default isChildRoute\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp'\nimport matchRoute from './matchRoute'\nimport resolveRoute from './resolveRoute'\nimport isChildRoute from './isChildRoute'\n\nclass UniversalRouter {\n  constructor(routes, options = {}) {\n    if (!routes || typeof routes !== 'object') {\n      throw new TypeError('Invalid routes')\n    }\n\n    this.baseUrl = options.baseUrl || ''\n    this.errorHandler = options.errorHandler\n    this.resolveRoute = options.resolveRoute || resolveRoute\n    this.context = { router: this, ...options.context }\n    this.root = Array.isArray(routes) ? { path: '', children: routes, parent: null } : routes\n    this.root.parent = null\n  }\n\n  resolve(pathnameOrContext) {\n    const context = {\n      ...this.context,\n      ...(typeof pathnameOrContext === 'string'\n        ? { pathname: pathnameOrContext }\n        : pathnameOrContext),\n    }\n    const match = matchRoute(\n      this.root,\n      this.baseUrl,\n      context.pathname.substr(this.baseUrl.length),\n      [],\n      null,\n    )\n    const resolve = this.resolveRoute\n    let matches = null\n    let nextMatches = null\n    let currentContext = context\n\n    function next(resume, parent = matches.value.route, prevResult) {\n      const routeToSkip = prevResult === null && !matches.done && matches.value.route\n      matches = nextMatches || match.next(routeToSkip)\n      nextMatches = null\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches\n          return Promise.resolve(null)\n        }\n      }\n\n      if (matches.done) {\n        const error = new Error('Route not found')\n        error.status = 404\n        return Promise.reject(error)\n      }\n\n      currentContext = { ...context, ...matches.value }\n\n      return Promise.resolve(resolve(currentContext, matches.value.params)).then((result) => {\n        if (result !== null && result !== undefined) {\n          return result\n        }\n        return next(resume, parent, result)\n      })\n    }\n\n    context.next = next\n\n    return Promise.resolve()\n      .then(() => next(true, this.root))\n      .catch((error) => {\n        if (this.errorHandler) {\n          return this.errorHandler(error, currentContext)\n        }\n        throw error\n      })\n  }\n}\n\nUniversalRouter.pathToRegexp = pathToRegexp\n\nexport default UniversalRouter\n","import UR from \"universal-router\"\r\n\r\nlet link1 = Object.assign(document.createElement(\"a\"), {\r\n  href: \"/something?query=just+for+looks\",\r\n  innerText: \" bloop \"\r\n})\r\nlet link2 = Object.assign(document.createElement(\"a\"), {\r\n  href: \"/somewhere/else?query=me&find=you#goto\",\r\n  innerText: \"| bleep \"\r\n})\r\nlet link3 = Object.assign(document.createElement(\"a\"), {\r\n  href: \"#goto\",\r\n  innerText: \"| rel \"\r\n})\r\ndocument.body.appendChild(link1)\r\ndocument.body.appendChild(link2)\r\ndocument.body.appendChild(link3)\r\n\r\nconst router = new UR([\r\n  { path: \"/one\", action: () => \"Page One\" },\r\n  { path: \"/two\", action: () => \"Page Two\" }\r\n])\r\n\r\nrouter.resolve({ pathname: \"/one\" }).then(result => console.log(result))\r\n"]}