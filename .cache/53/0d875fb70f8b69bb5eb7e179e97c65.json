{"id":"node_modules/@thi.ng/compose/trampoline.js","dependencies":[{"name":"C:\\Users\\logan\\Projects\\thi-ng\\hurl\\package.json","includedInParent":true,"mtime":1575568911358},{"name":"C:\\Users\\logan\\Projects\\thi-ng\\hurl\\node_modules\\@thi.ng\\compose\\package.json","includedInParent":true,"mtime":1575409828361}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trampoline = void 0;\n\n/**\n * Takes a function returning either a no-arg function (thunk) or its\n * already realized (non-function) result. Re-executes thunk for as long\n * as it returns another function/thunk. Once a non-function result has\n * been produced, `trampoline` returns that value itself. If the final\n * result should be function, it needs to wrapped (e.g. as a 1-elem\n * array).\n *\n * This function should be used for non-stack consuming recursion. I.e.\n * a trampoline is a form of continuation passing style and only ever\n * consumes max. 2 extra stack frames, independent from recursion depth.\n *\n * ```\n * const countdown = (acc, x) =>\n *   x >= 0 ?\n *     () => (acc.push(x), countdown(acc, x-1)) :\n *     acc;\n *\n * trampoline(countdown([], 4))\n * // [ 4, 3, 2, 1, 0 ]\n *\n * trampoline(countdown([], -1))\n * // []\n * ```\n *\n * @param f\n */\nconst trampoline = f => {\n  while (typeof f === \"function\") {\n    f = f();\n  }\n\n  return f;\n};\n\nexports.trampoline = trampoline;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":1,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":28,"column":7}},{"name":"trampoline","generated":{"line":35,"column":6},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":28,"column":13}},{"generated":{"line":35,"column":16},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":28,"column":23}},{"name":"f","generated":{"line":35,"column":19},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":28,"column":27}},{"generated":{"line":35,"column":20},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":28,"column":26}},{"generated":{"line":35,"column":24},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":28,"column":33}},{"generated":{"line":36,"column":0},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":29,"column":4}},{"generated":{"line":36,"column":9},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":29,"column":11}},{"name":"f","generated":{"line":36,"column":16},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":29,"column":18}},{"generated":{"line":36,"column":17},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":29,"column":11}},{"generated":{"line":36,"column":22},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":29,"column":24}},{"generated":{"line":36,"column":32},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":29,"column":4}},{"generated":{"line":36,"column":34},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":29,"column":36}},{"name":"f","generated":{"line":37,"column":0},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":30,"column":8}},{"name":"f","generated":{"line":37,"column":4},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":30,"column":8}},{"generated":{"line":37,"column":5},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":30,"column":9}},{"name":"f","generated":{"line":37,"column":8},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":30,"column":12}},{"generated":{"line":37,"column":9},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":30,"column":13}},{"generated":{"line":37,"column":11},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":30,"column":8}},{"generated":{"line":38,"column":0},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":31,"column":5}},{"generated":{"line":40,"column":0},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":32,"column":4}},{"name":"f","generated":{"line":40,"column":9},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":32,"column":11}},{"generated":{"line":40,"column":10},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":32,"column":4}},{"generated":{"line":41,"column":0},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":33,"column":1}},{"generated":{"line":41,"column":1},"source":"node_modules/@thi.ng/compose/trampoline.js","original":{"line":28,"column":7}}],"sources":{"node_modules/@thi.ng/compose/trampoline.js":"/**\n * Takes a function returning either a no-arg function (thunk) or its\n * already realized (non-function) result. Re-executes thunk for as long\n * as it returns another function/thunk. Once a non-function result has\n * been produced, `trampoline` returns that value itself. If the final\n * result should be function, it needs to wrapped (e.g. as a 1-elem\n * array).\n *\n * This function should be used for non-stack consuming recursion. I.e.\n * a trampoline is a form of continuation passing style and only ever\n * consumes max. 2 extra stack frames, independent from recursion depth.\n *\n * ```\n * const countdown = (acc, x) =>\n *   x >= 0 ?\n *     () => (acc.push(x), countdown(acc, x-1)) :\n *     acc;\n *\n * trampoline(countdown([], 4))\n * // [ 4, 3, 2, 1, 0 ]\n *\n * trampoline(countdown([], -1))\n * // []\n * ```\n *\n * @param f\n */\nexport const trampoline = (f) => {\n    while (typeof f === \"function\") {\n        f = f();\n    }\n    return f;\n};\n"},"lineCount":null}},"error":null,"hash":"bd2bd9599c1f2e9f9d3d2b898aa3c638","cacheData":{"env":{}}}