{"id":"node_modules/@thi.ng/compose/thread-first.js","dependencies":[{"name":"C:\\Users\\logan\\Projects\\thi-ng\\hurl\\package.json","includedInParent":true,"mtime":1575568911358},{"name":"C:\\Users\\logan\\Projects\\thi-ng\\hurl\\node_modules\\@thi.ng\\compose\\package.json","includedInParent":true,"mtime":1575409828361}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.threadFirst = void 0;\n\n/**\n * Takes an `init` value and a number of functions and/or function\n * tuples, consisting of: `[fn, ...args]`. Executes each function\n * (or tuple) with the return value of the previous expression inserted\n * as first argument, using `init` for the first expression.\n *\n * ```\n * const neg = (x) => -x;\n * const sub = (a, b) => a - b;\n * const div = (a, b) => a / b;\n *\n * threadFirst(\n *   5,\n *   neg,       // -5\n *   [sub, 20], // -5 - 20 = -25\n *   [div, 10]  // -25 / 10 = -2.5\n * );\n *\n * // -2.5\n * ```\n *\n * @see threadLast\n *\n * @param init\n * @param fns\n */\nconst threadFirst = (init, ...fns) => fns.reduce((acc, expr) => typeof expr === \"function\" ? expr(acc) : expr[0](acc, ...expr.slice(1)), init);\n\nexports.threadFirst = threadFirst;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":1,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":7}},{"name":"threadFirst","generated":{"line":34,"column":6},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":13}},{"generated":{"line":34,"column":17},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":24}},{"generated":{"line":34,"column":20},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":27}},{"name":"init","generated":{"line":34,"column":21},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":28}},{"generated":{"line":34,"column":25},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":27}},{"generated":{"line":34,"column":27},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":34}},{"name":"fns","generated":{"line":34,"column":30},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":37}},{"generated":{"line":34,"column":33},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":27}},{"name":"fns","generated":{"line":34,"column":38},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":45}},{"generated":{"line":34,"column":41},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":48}},{"name":"reduce","generated":{"line":34,"column":42},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":49}},{"generated":{"line":34,"column":48},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":45}},{"generated":{"line":34,"column":49},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":56}},{"name":"acc","generated":{"line":34,"column":50},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":57}},{"generated":{"line":34,"column":53},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":56}},{"name":"expr","generated":{"line":34,"column":55},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":62}},{"generated":{"line":34,"column":59},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":56}},{"generated":{"line":34,"column":64},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":71}},{"name":"expr","generated":{"line":34,"column":71},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":78}},{"generated":{"line":34,"column":75},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":71}},{"generated":{"line":34,"column":80},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":87}},{"generated":{"line":34,"column":90},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":71}},{"name":"expr","generated":{"line":34,"column":93},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":28,"column":6}},{"generated":{"line":34,"column":97},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":28,"column":10}},{"name":"acc","generated":{"line":34,"column":98},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":28,"column":11}},{"generated":{"line":34,"column":101},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":28,"column":10}},{"generated":{"line":34,"column":102},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":71}},{"name":"expr","generated":{"line":34,"column":105},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":6}},{"generated":{"line":34,"column":109},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":10}},{"generated":{"line":34,"column":110},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":11}},{"generated":{"line":34,"column":111},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":10}},{"generated":{"line":34,"column":112},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":6}},{"name":"acc","generated":{"line":34,"column":113},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":14}},{"generated":{"line":34,"column":116},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":6}},{"generated":{"line":34,"column":118},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":19}},{"name":"expr","generated":{"line":34,"column":121},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":22}},{"generated":{"line":34,"column":125},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":26}},{"name":"slice","generated":{"line":34,"column":126},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":27}},{"generated":{"line":34,"column":131},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":22}},{"generated":{"line":34,"column":132},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":33}},{"generated":{"line":34,"column":133},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":22}},{"generated":{"line":34,"column":134},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":6}},{"generated":{"line":34,"column":135},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":45}},{"name":"init","generated":{"line":34,"column":137},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":29,"column":38}},{"generated":{"line":34,"column":141},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":45}},{"generated":{"line":34,"column":142},"source":"node_modules/@thi.ng/compose/thread-first.js","original":{"line":27,"column":7}}],"sources":{"node_modules/@thi.ng/compose/thread-first.js":"/**\n * Takes an `init` value and a number of functions and/or function\n * tuples, consisting of: `[fn, ...args]`. Executes each function\n * (or tuple) with the return value of the previous expression inserted\n * as first argument, using `init` for the first expression.\n *\n * ```\n * const neg = (x) => -x;\n * const sub = (a, b) => a - b;\n * const div = (a, b) => a / b;\n *\n * threadFirst(\n *   5,\n *   neg,       // -5\n *   [sub, 20], // -5 - 20 = -25\n *   [div, 10]  // -25 / 10 = -2.5\n * );\n *\n * // -2.5\n * ```\n *\n * @see threadLast\n *\n * @param init\n * @param fns\n */\nexport const threadFirst = (init, ...fns) => fns.reduce((acc, expr) => typeof expr === \"function\"\n    ? expr(acc)\n    : expr[0](acc, ...expr.slice(1)), init);\n"},"lineCount":null}},"error":null,"hash":"5dcc12ac563b4f6f78c49833e2159221","cacheData":{"env":{}}}