{"id":"node_modules/@thi.ng/transducers/iter/iterate.js","dependencies":[{"name":"C:\\Users\\logan\\Projects\\thi-ng\\hurl\\package.json","includedInParent":true,"mtime":1575581197116},{"name":"C:\\Users\\logan\\Projects\\thi-ng\\hurl\\node_modules\\@thi.ng\\transducers\\package.json","includedInParent":true,"mtime":1575409828371}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.iterate = iterate;\n\n/**\n * Yields an infinite iterator of the inductive sequence:\n *\n * f(x+1) = f(f(x))\n *\n * The first value emitted always is `seed` itself, then f(seed),\n * f(f(seed)) etc. The given function is called with the current\n * iteration counter as 2nd arg.\n *\n * ```\n * [...take(5, iterate((x) => x * 2, 1))]\n * // [ 1, 2, 4, 8, 16 ]\n *\n * [...take(8, iterate((x, i) => x * 10 + i, 0))]\n * // [ 0, 1, 12, 123, 1234, 12345, 123456, 1234567 ]\n * ```\n *\n * @param fn\n * @param seed\n */\nfunction* iterate(fn, seed) {\n  let i = 0;\n\n  while (true) {\n    yield seed;\n    seed = fn(seed, ++i);\n  }\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":1,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":21,"column":7}},{"name":"iterate","generated":{"line":28,"column":10},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":21,"column":17}},{"generated":{"line":28,"column":17},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":21,"column":7}},{"name":"fn","generated":{"line":28,"column":18},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":21,"column":25}},{"generated":{"line":28,"column":20},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":21,"column":7}},{"name":"seed","generated":{"line":28,"column":22},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":21,"column":29}},{"generated":{"line":28,"column":26},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":21,"column":7}},{"generated":{"line":28,"column":28},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":21,"column":35}},{"generated":{"line":29,"column":0},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":22,"column":4}},{"name":"i","generated":{"line":29,"column":6},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":22,"column":8}},{"generated":{"line":29,"column":7},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":22,"column":9}},{"generated":{"line":29,"column":10},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":22,"column":12}},{"generated":{"line":29,"column":11},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":22,"column":4}},{"generated":{"line":31,"column":0},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":23,"column":4}},{"generated":{"line":31,"column":9},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":23,"column":11}},{"generated":{"line":31,"column":13},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":23,"column":4}},{"generated":{"line":31,"column":15},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":23,"column":17}},{"generated":{"line":32,"column":0},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":8}},{"name":"seed","generated":{"line":32,"column":10},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":14}},{"generated":{"line":32,"column":14},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":24,"column":8}},{"name":"seed","generated":{"line":33,"column":0},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":8}},{"name":"seed","generated":{"line":33,"column":4},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":8}},{"generated":{"line":33,"column":8},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":12}},{"name":"fn","generated":{"line":33,"column":11},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":15}},{"generated":{"line":33,"column":13},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":17}},{"name":"seed","generated":{"line":33,"column":14},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":18}},{"generated":{"line":33,"column":18},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":17}},{"generated":{"line":33,"column":20},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":24}},{"name":"i","generated":{"line":33,"column":22},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":26}},{"generated":{"line":33,"column":23},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":17}},{"generated":{"line":33,"column":24},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":25,"column":8}},{"generated":{"line":34,"column":0},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":26,"column":5}},{"generated":{"line":35,"column":0},"source":"node_modules/@thi.ng/transducers/iter/iterate.js","original":{"line":27,"column":1}}],"sources":{"node_modules/@thi.ng/transducers/iter/iterate.js":"/**\n * Yields an infinite iterator of the inductive sequence:\n *\n * f(x+1) = f(f(x))\n *\n * The first value emitted always is `seed` itself, then f(seed),\n * f(f(seed)) etc. The given function is called with the current\n * iteration counter as 2nd arg.\n *\n * ```\n * [...take(5, iterate((x) => x * 2, 1))]\n * // [ 1, 2, 4, 8, 16 ]\n *\n * [...take(8, iterate((x, i) => x * 10 + i, 0))]\n * // [ 0, 1, 12, 123, 1234, 12345, 123456, 1234567 ]\n * ```\n *\n * @param fn\n * @param seed\n */\nexport function* iterate(fn, seed) {\n    let i = 0;\n    while (true) {\n        yield seed;\n        seed = fn(seed, ++i);\n    }\n}\n"},"lineCount":null}},"error":null,"hash":"cda4172d9fb3a46ce7c9394a88658e48","cacheData":{"env":{}}}