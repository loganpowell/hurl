{"id":"node_modules/@thi.ng/arrays/starts-with.js","dependencies":[{"name":"C:\\Users\\logan\\Projects\\thi-ng\\hurl\\package.json","includedInParent":true,"mtime":1575568911358},{"name":"C:\\Users\\logan\\Projects\\thi-ng\\hurl\\node_modules\\@thi.ng\\arrays\\package.json","includedInParent":true,"mtime":1575409828361},{"name":"@thi.ng/equiv","loc":{"line":1,"column":29},"parent":"C:\\Users\\logan\\Projects\\thi-ng\\hurl\\node_modules\\@thi.ng\\arrays\\starts-with.js","resolved":"C:\\Users\\logan\\Projects\\thi-ng\\hurl\\node_modules\\@thi.ng\\equiv\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startsWith = void 0;\n\nvar _equiv = require(\"@thi.ng/equiv\");\n\n/**\n * Returns true if the first items of `buf` are the same items as in\n * `needle`. This means `buf` should have at least the same length as\n * `needle` for this to be true.\n *\n * By default, uses thi.ng/equiv for equality checking.\n *\n * @see endsWith\n *\n * @param buf\n * @param needle\n * @param equiv\n */\nconst startsWith = (buf, needle, equiv = _equiv.equiv) => {\n  let i = buf.length;\n  let j = needle.length;\n  if (i < j) return false;\n\n  while (-j >= 0 && equiv(buf[j], needle[j])) {}\n\n  return j < 0;\n};\n\nexports.startsWith = startsWith;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":2,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":15,"column":7}},{"name":"startsWith","generated":{"line":23,"column":6},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":15,"column":13}},{"generated":{"line":23,"column":16},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":15,"column":23}},{"generated":{"line":23,"column":19},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":15,"column":26}},{"name":"buf","generated":{"line":23,"column":20},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":15,"column":27}},{"generated":{"line":23,"column":23},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":15,"column":26}},{"name":"needle","generated":{"line":23,"column":25},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":15,"column":32}},{"generated":{"line":23,"column":31},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":15,"column":26}},{"name":"equiv","generated":{"line":23,"column":33},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":15,"column":40}},{"generated":{"line":23,"column":38},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":15,"column":45}},{"name":"_eq","generated":{"line":23,"column":41},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":15,"column":48}},{"generated":{"line":23,"column":53},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":15,"column":26}},{"generated":{"line":23,"column":58},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":15,"column":56}},{"generated":{"line":24,"column":0},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":16,"column":4}},{"name":"i","generated":{"line":24,"column":6},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":16,"column":8}},{"generated":{"line":24,"column":7},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":16,"column":9}},{"name":"buf","generated":{"line":24,"column":10},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":16,"column":12}},{"generated":{"line":24,"column":13},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":16,"column":15}},{"name":"length","generated":{"line":24,"column":14},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":16,"column":16}},{"generated":{"line":24,"column":20},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":16,"column":4}},{"generated":{"line":25,"column":0},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":17,"column":4}},{"name":"j","generated":{"line":25,"column":6},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":17,"column":8}},{"generated":{"line":25,"column":7},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":17,"column":9}},{"name":"needle","generated":{"line":25,"column":10},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":17,"column":12}},{"generated":{"line":25,"column":16},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":17,"column":18}},{"name":"length","generated":{"line":25,"column":17},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":17,"column":19}},{"generated":{"line":25,"column":23},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":17,"column":4}},{"generated":{"line":26,"column":0},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":18,"column":4}},{"name":"i","generated":{"line":26,"column":6},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":18,"column":8}},{"generated":{"line":26,"column":7},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":18,"column":9}},{"name":"j","generated":{"line":26,"column":10},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":18,"column":12}},{"generated":{"line":26,"column":11},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":18,"column":4}},{"generated":{"line":26,"column":13},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":19,"column":8}},{"generated":{"line":26,"column":20},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":19,"column":15}},{"generated":{"line":26,"column":25},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":19,"column":8}},{"generated":{"line":28,"column":0},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":4}},{"generated":{"line":28,"column":9},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":11}},{"name":"j","generated":{"line":28,"column":10},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":12}},{"generated":{"line":28,"column":11},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":11}},{"generated":{"line":28,"column":15},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":17}},{"generated":{"line":28,"column":16},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":11}},{"name":"equiv","generated":{"line":28,"column":20},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":22}},{"generated":{"line":28,"column":25},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":27}},{"name":"buf","generated":{"line":28,"column":26},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":28}},{"generated":{"line":28,"column":29},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":31}},{"name":"j","generated":{"line":28,"column":30},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":32}},{"generated":{"line":28,"column":31},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":31}},{"generated":{"line":28,"column":32},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":27}},{"name":"needle","generated":{"line":28,"column":34},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":36}},{"generated":{"line":28,"column":40},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":42}},{"name":"j","generated":{"line":28,"column":41},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":43}},{"generated":{"line":28,"column":42},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":42}},{"generated":{"line":28,"column":43},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":27}},{"generated":{"line":28,"column":44},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":4}},{"generated":{"line":28,"column":46},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":48}},{"generated":{"line":28,"column":47},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":20,"column":51}},{"generated":{"line":30,"column":0},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":21,"column":4}},{"name":"j","generated":{"line":30,"column":9},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":21,"column":11}},{"generated":{"line":30,"column":10},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":21,"column":12}},{"generated":{"line":30,"column":13},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":21,"column":15}},{"generated":{"line":30,"column":14},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":21,"column":4}},{"generated":{"line":31,"column":0},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":22,"column":1}},{"generated":{"line":31,"column":1},"source":"node_modules/@thi.ng/arrays/starts-with.js","original":{"line":15,"column":7}}],"sources":{"node_modules/@thi.ng/arrays/starts-with.js":"import { equiv as _eq } from \"@thi.ng/equiv\";\n/**\n * Returns true if the first items of `buf` are the same items as in\n * `needle`. This means `buf` should have at least the same length as\n * `needle` for this to be true.\n *\n * By default, uses thi.ng/equiv for equality checking.\n *\n * @see endsWith\n *\n * @param buf\n * @param needle\n * @param equiv\n */\nexport const startsWith = (buf, needle, equiv = _eq) => {\n    let i = buf.length;\n    let j = needle.length;\n    if (i < j)\n        return false;\n    while (-j >= 0 && equiv(buf[j], needle[j])) { }\n    return j < 0;\n};\n"},"lineCount":null}},"error":null,"hash":"9574b5bb26f14e48ee3ca7c41cb87195","cacheData":{"env":{}}}