{"id":"node_modules/@thi.ng/compose/thread-last.js","dependencies":[{"name":"C:\\Users\\logan\\Projects\\thi-ng\\hurl\\package.json","includedInParent":true,"mtime":1575488721738},{"name":"C:\\Users\\logan\\Projects\\thi-ng\\hurl\\node_modules\\@thi.ng\\compose\\package.json","includedInParent":true,"mtime":1575409828361}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.threadLast = void 0;\n\n/**\n * Takes an `init` value and a number of functions and/or function\n * tuples, consisting of: `[fn, ...args]`. Executes each function\n * (or tuple) with the return value of the previous expression inserted\n * as last argument, using `init` for the first expression.\n *\n * ```\n * const neg = (x) => -x;\n * const sub = (a, b) => a - b;\n * const div = (a, b) => a / b;\n *\n * threadLast(\n *   5,\n *   neg,       // -5\n *   [sub, 10], // 20 - (-5) = 25\n *   [div, 10]  // 10 / 25 = 0.4\n * );\n *\n * // 0.4\n * ```\n *\n * @see threadFirst\n *\n * @param init\n * @param fns\n */\nconst threadLast = (init, ...fns) => fns.reduce((acc, expr) => typeof expr === \"function\" ? expr(acc) : expr[0](...expr.slice(1), acc), init);\n\nexports.threadLast = threadLast;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":1,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":7}},{"name":"threadLast","generated":{"line":34,"column":6},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":13}},{"generated":{"line":34,"column":16},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":23}},{"generated":{"line":34,"column":19},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":26}},{"name":"init","generated":{"line":34,"column":20},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":27}},{"generated":{"line":34,"column":24},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":26}},{"generated":{"line":34,"column":26},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":33}},{"name":"fns","generated":{"line":34,"column":29},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":36}},{"generated":{"line":34,"column":32},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":26}},{"name":"fns","generated":{"line":34,"column":37},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":44}},{"generated":{"line":34,"column":40},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":47}},{"name":"reduce","generated":{"line":34,"column":41},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":48}},{"generated":{"line":34,"column":47},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":44}},{"generated":{"line":34,"column":48},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":55}},{"name":"acc","generated":{"line":34,"column":49},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":56}},{"generated":{"line":34,"column":52},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":55}},{"name":"expr","generated":{"line":34,"column":54},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":61}},{"generated":{"line":34,"column":58},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":55}},{"generated":{"line":34,"column":63},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":70}},{"name":"expr","generated":{"line":34,"column":70},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":77}},{"generated":{"line":34,"column":74},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":70}},{"generated":{"line":34,"column":79},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":86}},{"generated":{"line":34,"column":89},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":70}},{"name":"expr","generated":{"line":34,"column":92},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":28,"column":6}},{"generated":{"line":34,"column":96},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":28,"column":10}},{"name":"acc","generated":{"line":34,"column":97},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":28,"column":11}},{"generated":{"line":34,"column":100},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":28,"column":10}},{"generated":{"line":34,"column":101},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":70}},{"name":"expr","generated":{"line":34,"column":104},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":6}},{"generated":{"line":34,"column":108},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":10}},{"generated":{"line":34,"column":109},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":11}},{"generated":{"line":34,"column":110},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":10}},{"generated":{"line":34,"column":111},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":6}},{"generated":{"line":34,"column":112},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":14}},{"name":"expr","generated":{"line":34,"column":115},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":17}},{"generated":{"line":34,"column":119},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":21}},{"name":"slice","generated":{"line":34,"column":120},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":22}},{"generated":{"line":34,"column":125},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":17}},{"generated":{"line":34,"column":126},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":28}},{"generated":{"line":34,"column":127},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":17}},{"generated":{"line":34,"column":128},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":6}},{"name":"acc","generated":{"line":34,"column":130},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":32}},{"generated":{"line":34,"column":133},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":6}},{"generated":{"line":34,"column":134},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":44}},{"name":"init","generated":{"line":34,"column":136},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":29,"column":38}},{"generated":{"line":34,"column":140},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":44}},{"generated":{"line":34,"column":141},"source":"node_modules/@thi.ng/compose/thread-last.js","original":{"line":27,"column":7}}],"sources":{"node_modules/@thi.ng/compose/thread-last.js":"/**\n * Takes an `init` value and a number of functions and/or function\n * tuples, consisting of: `[fn, ...args]`. Executes each function\n * (or tuple) with the return value of the previous expression inserted\n * as last argument, using `init` for the first expression.\n *\n * ```\n * const neg = (x) => -x;\n * const sub = (a, b) => a - b;\n * const div = (a, b) => a / b;\n *\n * threadLast(\n *   5,\n *   neg,       // -5\n *   [sub, 10], // 20 - (-5) = 25\n *   [div, 10]  // 10 / 25 = 0.4\n * );\n *\n * // 0.4\n * ```\n *\n * @see threadFirst\n *\n * @param init\n * @param fns\n */\nexport const threadLast = (init, ...fns) => fns.reduce((acc, expr) => typeof expr === \"function\"\n    ? expr(acc)\n    : expr[0](...expr.slice(1), acc), init);\n"},"lineCount":null}},"error":null,"hash":"b5c2e37d75441513a2e15cf564814d39","cacheData":{"env":{}}}